/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/AsFwprzyvlh
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"

export function Stickies() {
  const [notes, setNotes] = useState([
    {
      id: 1,
      title: "Grocery List",
      content: "Milk, eggs, bread, apples",
      color: "bg-yellow-300",
    },
    {
      id: 2,
      title: "Meeting Notes",
      content: "Discuss new product roadmap",
      color: "bg-green-300",
    },
    {
      id: 3,
      title: "Reminder",
      content: "Pick up dry cleaning",
      color: "bg-blue-300",
    },
  ])
  const [newNote, setNewNote] = useState({
    title: "",
    content: "",
    color: "bg-yellow-300",
  })
  const createNote = () => {
    if (newNote.title.trim() && newNote.content.trim()) {
      setNotes([
        ...notes,
        {
          id: notes.length + 1,
          ...newNote,
        },
      ])
      setNewNote({
        title: "",
        content: "",
        color: "bg-yellow-300",
      })
    }
  }
  const deleteNote = (id) => {
    setNotes(notes.filter((note) => note.id !== id))
  }
  const archiveNote = (id) => {
    setNotes(notes.map((note) => (note.id === id ? { ...note, color: "bg-gray-300" } : note)))
  }
  const changeColor = (id, color) => {
    setNotes(notes.map((note) => (note.id === id ? { ...note, color } : note)))
  }
  return (
    <div className="flex flex-col h-screen bg-gray-100">
      <header className="bg-white shadow-md py-4 px-6 sticky top-0 z-10">
        <div className="flex items-center justify-between">
        <h2 className="text-1xl font-bold">
  "By failing to prepare, you are preparing to fail."
  <span className="font-normal"> â€” Benjamin Franklin</span>
</h2>

          <Button onClick={createNote}>
            <PlusIcon className="w-5 h-5 mr-2" />
            New Note
          </Button>
        </div>
      </header>
      <main className="flex-1 p-6 overflow-y-auto">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {notes.map((note) => (
            <div
              key={note.id}
              className={`p-4 rounded-md shadow-md ${note.color} transform rotate-[2deg] hover:rotate-0 transition-transform duration-300`}
            >
              <div className="flex justify-between items-center mb-2">
                <h2 className="text-lg font-bold">{note.title}</h2>
                <div className="flex gap-2">
                  <Button variant="ghost" size="icon" onClick={() => archiveNote(note.id)}>
                    <ArchiveIcon className="w-5 h-5" />
                  </Button>
                  <Button variant="ghost" size="icon" onClick={() => deleteNote(note.id)}>
                    <TrashIcon className="w-5 h-5" />
                  </Button>
                </div>
              </div>
              <p className="text-gray-700">{note.content}</p>
              <div className="flex gap-2 mt-4">
                <Button variant="ghost" size="icon" onClick={() => changeColor(note.id, "bg-yellow-300")}>
                  <div className="w-5 h-5 bg-yellow-300 rounded-full" />
                </Button>
                <Button variant="ghost" size="icon" onClick={() => changeColor(note.id, "bg-green-300")}>
                  <div className="w-5 h-5 bg-green-300 rounded-full" />
                </Button>
                <Button variant="ghost" size="icon" onClick={() => changeColor(note.id, "bg-blue-300")}>
                  <div className="w-5 h-5 bg-blue-300 rounded-full" />
                </Button>
                <Button variant="ghost" size="icon" onClick={() => changeColor(note.id, "bg-red-300")}>
                  <div className="w-5 h-5 bg-red-300 rounded-full" />
                </Button>
              </div>
            </div>
          ))}
          <div className="p-4 rounded-md shadow-md bg-white transform rotate-[-2deg] hover:rotate-0 transition-transform duration-300">
            <div className="mb-2">
              <Input
                placeholder="Title"
                value={newNote.title}
                onChange={(e) => setNewNote({ ...newNote, title: e.target.value })}
              />
            </div>
            <div className="mb-4">
              <Textarea
                placeholder="Content"
                value={newNote.content}
                onChange={(e) => setNewNote({ ...newNote, content: e.target.value })}
              />
            </div>
            <div className="flex gap-2">
              <Button variant="ghost" size="icon" onClick={() => setNewNote({ ...newNote, color: "bg-yellow-300" })}>
                <div className="w-5 h-5 bg-yellow-300 rounded-full" />
              </Button>
              <Button variant="ghost" size="icon" onClick={() => setNewNote({ ...newNote, color: "bg-green-300" })}>
                <div className="w-5 h-5 bg-green-300 rounded-full" />
              </Button>
              <Button variant="ghost" size="icon" onClick={() => setNewNote({ ...newNote, color: "bg-blue-300" })}>
                <div className="w-5 h-5 bg-blue-300 rounded-full" />
              </Button>
              <Button variant="ghost" size="icon" onClick={() => setNewNote({ ...newNote, color: "bg-red-300" })}>
                <div className="w-5 h-5 bg-red-300 rounded-full" />
              </Button>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

function ArchiveIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="20" height="5" x="2" y="3" rx="1" />
      <path d="M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8" />
      <path d="M10 12h4" />
    </svg>
  )
}


function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function TrashIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}
